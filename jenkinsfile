pipeline {
    agent any
    tools {
        maven 'maven3'
    }
    environment {
        SONAR_TOKEN = credentials('s-id')
        GITHUB_TOKEN = credentials('g-id')
        NEXUS_URL = 'http://13.127.88.40:8081/'
        NEXUS_REPO = 'sample-releases'
        ARTIFACT = 'org/example/devops/1.0.7/devops-1.0.7.war'
        DOCKER_IMAGE = 'srilalithac/artifact:1.0'

    }

    stages {
        stage('checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/psslalitha/Project1.git'
            }
        }
        
        stage('compile') {
            steps {
                sh 'mvn compile'
            }
        }
        
        stage('test') {
            steps {
                sh 'mvn test'
            }
        }
        
        
        
        stage('trivy') {
            steps {
                sh 'trivy fs ${WORKSPACE} --format table > trivy-scan-results.txt'            
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'sonar' // Name of your SonarQube scanner installation in Jenkins
                    withSonarQubeEnv('sonarqube') { // Name of your SonarQube server configuration in Jenkins
                        sh """
                        ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectName='poojatha' \
                        -Dsonar.projectVersion='1.0' \
                        -Dsonar.sources='${WORKSPACE}' \
                        -Dsonar.host.url='http://3.110.44.130:9000' \
                        -Dsonar.login='${SONAR_TOKEN}'
                        """
                    }
                }
            }
        }
        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 's-id'
                }
            }
        }
        stage('mvn build package') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('nexus') {
            steps {
                nexusArtifactUploader artifacts: [[artifactId: 'devops', classifier: '', file: 'target/devops.war', type: '.war']], credentialsId: 'n-id', groupId: 'org.example', nexusUrl: '13.127.88.40:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'sample-releases', version: '1.0.7'
            }
        }
        stage('Download Artifact') {
            steps {
                sh 'curl -u admin:poojatha -O $NEXUS_URL/repository/$NEXUS_REPO/$ARTIFACT'
            }
        }
        stage('Build Docker Image') {
            steps {
                script{
                   withDockerRegistry(credentialsId: 'd-id'){
                      sh 'docker build -t $DOCKER_IMAGE .'
                      sh 'docker push $DOCKER_IMAGE'
                    }
                   
                }
               
            }
        }

        

    }
}
